from .config import bot, dp
from .locale import locale

from aiogram.types import InputTextMessageContent, \
                          InlineQueryResultAudio, InlineQueryResultArticle
from wikipya.aiowiki import Wikipya, NotFound
from bs4 import BeautifulSoup
from random import randint, choice

from .lib import chez


@dp.inline_handler(lambda query: False or
                   query.query.startswith("wiki ") or
                   query.query.startswith("–≤–∏–∫–∏ "))
async def query_text(query):
    q = query.query.split(maxsplit=1)[1]

    wiki = Wikipya("ru")
    search = await wiki.search(q, 3)

    buttons = []
    for item in search:
        page = await wiki.page(item)
        soup = BeautifulSoup(page.text, "lxml")
        text = page.fixed

        btn_defaults = {"id": page.pageid, "title": page.title,
                        "description": soup.text[:100],
                        "thumb_width": 48, "thumb_height": 48,
                        "input_message_content": InputTextMessageContent(
                            message_text=text,
                            parse_mode="HTML"
                        )}

        try:
            img = await page.image(75)
            buttons.append(InlineQueryResultArticle(**btn_defaults,
                                                    thumb_url=img.source))

        except NotFound:
            default_image = locale.default_wiki_image
            buttons.append(InlineQueryResultArticle(**btn_defaults,
                                                    thumb_url=default_image))

    await bot.answer_inline_query(query.id, buttons)


@dp.inline_handler(lambda query: len(query.query) == 0)
async def cock(query):
    cock_size = randint(0, 46)
    if cock_size == 46:
        cock_size = 1488

    person = choice(locale.persons)

    await bot.answer_inline_query(query.id, [
        InlineQueryResultArticle(
            id=5,
            title="–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–∫ —Å–∞–π–∑",
            description="–ù–æ–≤–∞—è –∏–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏–Ω—É —á–ª–µ–Ω–∞"
                        " –æ—á–µ–Ω—å —Ç–æ—á–Ω–æ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ö—É–π –∫ —ç–∫—Ä–∞–Ω—É",
            input_message_content=InputTextMessageContent(
                message_text=f"üè≥Ô∏è‚Äçüåà –†–∞–∑–º–µ—Ä –º–æ–µ–≥–æ —Ö—É—è *{cock_size}—Å–º*",
                parse_mode="Markdown"
            )
        ),

        InlineQueryResultArticle(
            id=6,
            title="–ö—Ç–æ —è –∏–∑ –ü—Ä–æ—Ñ—Å–æ—é–∑–∞?",
            description="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ç–æ –≤—ã –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–µ. –¢–æ—á–Ω–æ—Å—Ç—å 100%",
            input_message_content=InputTextMessageContent(
                message_text=f"–í –ø—Ä–æ—Ñ—Å–æ—é–∑–µ —è *{person['name']}*\n\n"
                             f"__{person['description']}__",
                parse_mode="Markdown"
            )
        )
    ], cache_time=1)


@dp.inline_handler(lambda query: len(query.query) > 0)
async def query_say(query):
    query.query = query.query.strip()

    if query.query.endswith(".") or \
       query.query.endswith("?") or \
       query.query.endswith("!"):
        btns = [
            InlineQueryResultAudio(id=1, title="test",
                                   audio_url=chez.say(query.query))
        ]

        await bot.answer_inline_query(query.id, btns)
    else:
        btns = [
            InlineQueryResultArticle(
                id=1,
                title="–ü–æ—Å—Ç–∞–≤—å —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ!",
                description="–ù–∞–¥–æ. –í—Å—Ç–∞–≤—å.",
                input_message_content=InputTextMessageContent(
                    message_text="–ü–†–û–°–¢–û –í–°–¢–ê–í–¨ –¢–û–ß–ö–£."
                )
            )
        ]

        await bot.answer_inline_query(query.id, btns)
